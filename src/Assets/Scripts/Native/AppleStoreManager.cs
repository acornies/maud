// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
using System;
using UnityEngine;
namespace LegendPeak.Native
{
	public class AppleStoreManager : IStoreManager
	{
		public AppleStoreManager ()
		{
			GameCenterManager.OnAuthFinished += OnAuthFinished;
			GameCenterManager.init();

			IOSInAppPurchaseManager.instance.OnStoreKitInitComplete += OnStoreKitInitComplete;
			IOSInAppPurchaseManager.instance.OnTransactionComplete += OnAppleTransactionComplete;
			
			IOSInAppPurchaseManager.instance.loadStore();
		}

		public bool authenticated { get; private set;}

		public void buyProduct(string productId)
		{
			IOSInAppPurchaseManager.instance.buyProduct (productId);
		}

		public void showLeaderboards ()
		{
			GameCenterManager.showLeaderBoards ();
		}

		public void showLeaderboard(string leaderboardId)
		{
			GameCenterManager.showLeaderBoard (leaderboardId);
		}

		public void submitScore(int score, string leaderboardId)
		{
			GameCenterManager.reportScore (score, leaderboardId);
		}

		public void loadPlayerScore(string leaderboardId)
		{
			GameCenterManager.loadCurrentPlayerScore (leaderboardId);
		}

		public event EventHandler OnTransactionComplete;

		void OnAuthFinished(ISN_Result res)
		{
			if (res.IsSucceeded) 
			{
				authenticated = true;
				//IOSNativePopUpManager.showMessage("Player Authored ", "ID: " + GameCenterManager.player.playerId + "\n" + "Alias: " + GameCenterManager.player.alias);
			} 
			else 
			{
				IOSNativePopUpManager.showMessage("Game Center ", "Not logged in.");
			}
		}

		private static void OnStoreKitInitComplete (ISN_Result result) {
			IOSInAppPurchaseManager.instance.OnStoreKitInitComplete -= OnStoreKitInitComplete;
			
			if(result.IsSucceeded) {
				Debug.Log("Inited successfully, Avaliable products count: " + IOSInAppPurchaseManager.instance.products.Count.ToString());
			} else {
				Debug.Log("StoreKit Init Failed.  Error code: " + result.error.code + "\n" + "Error description:" + result.error.description);
			}
		}

		private void OnAppleTransactionComplete (IOSStoreKitResponse response) {

			var storeResponse = new AppleStoreResponse () { productId = response.productIdentifier };
			Debug.Log("OnTransactionComplete: " + response.productIdentifier);
			Debug.Log("OnTransactionComplete: state: " + response.state);
			
			switch(response.state) {
			case InAppPurchaseState.Purchased:
			case InAppPurchaseState.Restored:
				//Our product been succsesly purchased or restored
				//So we need to provide content to our user 
				//depends on productIdentifier
				//UnlockProducts(response.productIdentifier);
				storeResponse.status = StoreResponseStatus.Success;
				//storeResponse.productId = response.productIdentifier;
				break;
			case InAppPurchaseState.Deferred:
				//iOS 8 introduces Ask to Buy, which lets 
				//parents approve any purchases initiated by children
				//You should update your UI to reflect this 
				//deferred state, and expect another Transaction 
				//Complete  to be called again with a new transaction state 
				//reflecting the parent's decision or after the 
				//transaction times out. Avoid blocking your UI 
				//or gameplay while waiting for the transaction to be updated.
				storeResponse.status = StoreResponseStatus.Deferred;
				storeResponse.message = "Waiting approval from parent or guardian.";
				break;
			case InAppPurchaseState.Failed:
				//Our purchase flow is failed.
				//We can unlock interface and report user that the purchase is failed. 
				Debug.Log("Transaction failed with error, code: " + response.error.code);
				Debug.Log("Transaction failed with error, description: " + response.error.description);
				storeResponse.status = StoreResponseStatus.Failed;
				storeResponse.message = response.error.description;
				break;
			}
			
			IOSNativePopUpManager.showMessage("Store Kit Response", "product " + response.productIdentifier + " state: " + response.state.ToString());
			if (OnTransactionComplete != null)
			{
				OnTransactionComplete (this, storeResponse);
			}
		}
	}
}

